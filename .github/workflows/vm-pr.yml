name: VM
on:
  workflow_call:
    inputs:
      dep-cache-key:
        required: false
        type: string
      submodule-cache-key:
        required: false
        type: string
  workflow_dispatch:
    inputs:
      dep-cache-key:
        required: false
        default: 'none'
      submodule-cache-key:
        required: false
        default: 'none'

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}-vm-pr
  cancel-in-progress: true

env:
  CI: true

jobs:
  vm-api:
    runs-on: ubuntu-24.04
    steps:
      - name: Restore prepared workspace (if provided)
        if: inputs.dep-cache-key != 'none'
        uses: actions/cache/restore@v4
        id: dep-cache
        with:
          path: ${{ github.workspace }}
          key: ${{ inputs.dep-cache-key }}

      - name: Checkout repository (fallback)
        if: steps.dep-cache.outputs.cache-hit != 'true'
        uses: actions/checkout@v5
        with:
          submodules: recursive

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Setup Node.js (enable pnpm store cache)
        uses: actions/setup-node@v5
        with:
          node-version: 20
          cache: pnpm
          cache-dependency-path: pnpm-lock.yaml

      - name: Prefetch deps
        run: pnpm fetch --frozen-lockfile

      - name: Install dependencies (fallback)
        if: steps.dep-cache.outputs.cache-hit != 'true'
        working-directory: ${{ github.workspace }}
        run: pnpm install --frozen-lockfile --ignore-scripts --prefer-offline

      - name: Build
        run: pnpm -w -r --filter @ethereumjs/vm... run build

      - name: Initialize ethereum-tests (from cache)
        if: inputs.submodule-cache-key != 'none'
        uses: actions/cache/restore@v4
        with:
          path: ${{ github.workspace }}/packages/ethereum-tests
          key: ${{ inputs.submodule-cache-key }}
          fail-on-cache-miss: true

      - name: Coverage @ethereumjs/vm
        working-directory: ${{ github.workspace }}/packages/vm
        run: pnpm run coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ${{ github.workspace }}/packages/vm/coverage/lcov.info
          flags: vm

  vm-state:
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        fork: ['Prague']
      fail-fast: false
    steps:
      - name: Restore prepared workspace (if provided)
        if: inputs.dep-cache-key != 'none'
        uses: actions/cache/restore@v4
        id: dep-cache
        with:
          path: ${{ github.workspace }}
          key: ${{ inputs.dep-cache-key }}

      - name: Checkout repository (fallback)
        if: steps.dep-cache.outputs.cache-hit != 'true'
        uses: actions/checkout@v5
        with:
          submodules: recursive

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Setup Node.js (enable pnpm store cache)
        uses: actions/setup-node@v5
        with:
          node-version: 20
          cache: pnpm
          cache-dependency-path: pnpm-lock.yaml

      - name: Prefetch deps
        run: pnpm fetch --frozen-lockfile

      - name: Install dependencies (fallback)
        if: steps.dep-cache.outputs.cache-hit != 'true'
        working-directory: ${{ github.workspace }}
        run: pnpm install --frozen-lockfile --ignore-scripts --prefer-offline

      - name: Build
        run: pnpm -w -r --filter @ethereumjs/vm... run build

      - name: Initialize ethereum-tests (from cache)
        if: inputs.submodule-cache-key != 'none'
        uses: actions/cache/restore@v4
        with:
          path: ${{ github.workspace }}/packages/ethereum-tests
          key: ${{ inputs.submodule-cache-key }}
          fail-on-cache-miss: true

      - name: Test VM State
        if: contains(join(github.event.pull_request.labels.*.name, ' '), 'skip most VM') == false
        working-directory: ${{ github.workspace }}/packages/vm
        run: pnpm run test:state -- --fork=${{ matrix.fork }} --verify-test-amount-alltests

      - name: Test Build Integrity
        if: contains(join(github.event.pull_request.labels.*.name, ' '), 'skip most VM')
        working-directory: ${{ github.workspace }}/packages/vm
        run: pnpm run test:buildIntegrity

  vm-osaka-state:
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
    steps:
      - name: Restore prepared workspace (if provided)
        if: inputs.dep-cache-key != 'none'
        uses: actions/cache/restore@v4
        id: dep-cache
        with:
          path: ${{ github.workspace }}
          key: ${{ inputs.dep-cache-key }}

      - name: Checkout repository (fallback)
        if: steps.dep-cache.outputs.cache-hit != 'true'
        uses: actions/checkout@v5
        with:
          submodules: recursive

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Setup Node.js (enable pnpm store cache)
        uses: actions/setup-node@v5
        with:
          node-version: 20
          cache: pnpm
          cache-dependency-path: pnpm-lock.yaml

      - name: Prefetch deps
        run: pnpm fetch --frozen-lockfile

      - name: Install dependencies (fallback)
        if: steps.dep-cache.outputs.cache-hit != 'true'
        working-directory: ${{ github.workspace }}
        run: pnpm install --frozen-lockfile --ignore-scripts --prefer-offline

      - name: Build
        run: pnpm -w -r --filter @ethereumjs/vm... run build

      - name: Test Osaka State
        if: contains(join(github.event.pull_request.labels.*.name, ' '), 'skip most VM') == false
        working-directory: ${{ github.workspace }}/packages/vm
        run: pnpm run test:osaka:state

      - name: Test Build Integrity
        if: contains(join(github.event.pull_request.labels.*.name, ' '), 'skip most VM')
        working-directory: ${{ github.workspace }}/packages/vm
        run: pnpm run test:buildIntegrity

  vm-osaka-blockchain:
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
    steps:
      - name: Restore prepared workspace (if provided)
        if: inputs.dep-cache-key != 'none'
        uses: actions/cache/restore@v4
        id: dep-cache
        with:
          path: ${{ github.workspace }}
          key: ${{ inputs.dep-cache-key }}

      - name: Checkout repository (fallback)
        if: steps.dep-cache.outputs.cache-hit != 'true'
        uses: actions/checkout@v5
        with:
          submodules: recursive

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Setup Node.js (enable pnpm store cache)
        uses: actions/setup-node@v5
        with:
          node-version: 20
          cache: pnpm
          cache-dependency-path: pnpm-lock.yaml

      - name: Prefetch deps
        run: pnpm fetch --frozen-lockfile

      - name: Install dependencies (fallback)
        if: steps.dep-cache.outputs.cache-hit != 'true'
        working-directory: ${{ github.workspace }}
        run: pnpm install --frozen-lockfile --ignore-scripts --prefer-offline

      - name: Build
        run: pnpm -w -r --filter @ethereumjs/vm... run build

      - name: Test Osaka Blockchain
        if: contains(join(github.event.pull_request.labels.*.name, ' '), 'skip most VM') == false
        working-directory: ${{ github.workspace }}/packages/vm
        run: pnpm run test:osaka:blockchain

      - name: Test Build Integrity
        if: contains(join(github.event.pull_request.labels.*.name, ' '), 'skip most VM')
        working-directory: ${{ github.workspace }}/packages/vm
        run: pnpm run test:buildIntegrity

  vm-state-extended:
    if: contains(join(github.event.pull_request.labels.*.name, ' '), 'test all hardforks')
    runs-on: ubuntu-latest
    strategy:
      matrix:
        fork:
          [
            'Cancun',
            'Shanghai',
            'Paris',
            'London',
            'Berlin',
            'MuirGlacier',
            'Istanbul',
            'Petersburg',
            'Constantinople',
            'Byzantium',
            'SpuriousDragon',
            'TangerineWhistle',
            'Homestead',
            'Chainstart',
          ]
      fail-fast: false
    steps:
      # We clone the repo and submodules if triggered from work-flow dispatch
      - if: inputs.submodule-cache-key == 'none'
        uses: actions/checkout@v5
        with:
          submodules: recursive

      # We restore the code/deps from cache if triggered from workflow_call (i.e. have valid cache key)
      - if: inputs.dep-cache-key != 'none'
        uses: actions/cache/restore@v4
        id: dep-cache
        with:
          path: ${{github.workspace}}
          key: ${{ inputs.dep-cache-key }}

      - uses: pnpm/action-setup@v4
        with:
          version: 10.5.2
          run_install: false

      - name: Use Node.js 20
        uses: actions/setup-node@v5
        with:
          node-version: 20

      - name: Install Dependencies (if not restored from cache)
        if: steps.dep-cache.outputs.cache-hit != 'true'
        run: pnpm install --frozen-lockfile
        working-directory: ${{ github.workspace }}
      - if: inputs.submodule-cache-key != 'none'
        uses: actions/cache/restore@v4
        name: Initialize ethereum-tests
        id: submodules-cache
        with:
          path: ${{github.workspace}}/packages/ethereum-tests
          key: ${{ inputs.submodule-cache-key}}
          fail-on-cache-miss: true
      - run: pnpm run test:state -- --fork=${{ matrix.fork }} --verify-test-amount-alltests

  vm-blockchain:
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        # Args to pass to the tester. Note that some have split the slow tests and only
        # run on forks where applicable (see PR #489 for numbers on these)

        # Tests were split with --dir and --excludeDir to balance execution times below the 9min mark.
        args:
          [
            '--fork=Prague --verify-test-amount-alltests',
          ]
      fail-fast: false
    steps:
      - name: Restore prepared workspace (if provided)
        if: inputs.dep-cache-key != 'none'
        uses: actions/cache/restore@v4
        id: dep-cache
        with:
          path: ${{ github.workspace }}
          key: ${{ inputs.dep-cache-key }}

      - name: Checkout repository (fallback)
        if: steps.dep-cache.outputs.cache-hit != 'true'
        uses: actions/checkout@v5
        with:
          submodules: recursive

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Setup Node.js (enable pnpm store cache)
        uses: actions/setup-node@v5
        with:
          node-version: 20
          cache: pnpm
          cache-dependency-path: pnpm-lock.yaml

      - name: Prefetch deps
        run: pnpm fetch --frozen-lockfile

      - name: Install dependencies (fallback)
        if: steps.dep-cache.outputs.cache-hit != 'true'
        working-directory: ${{ github.workspace }}
        run: pnpm install --frozen-lockfile --ignore-scripts --prefer-offline

      - name: Build
        run: pnpm -w -r --filter @ethereumjs/vm... run build

      - name: Initialize ethereum-tests (from cache)
        if: inputs.submodule-cache-key != 'none'
        uses: actions/cache/restore@v4
        with:
          path: ${{ github.workspace }}/packages/ethereum-tests
          key: ${{ inputs.submodule-cache-key }}
          fail-on-cache-miss: true

      - name: Test VM Blockchain
        if: contains(join(github.event.pull_request.labels.*.name, ' '), 'skip most VM') == false
        working-directory: ${{ github.workspace }}/packages/vm
        run: pnpm run test:blockchain -- ${{ matrix.args }}

      - name: Test Blockchain Build Integrity
        if: contains(join(github.event.pull_request.labels.*.name, ' '), 'skip most VM')
        working-directory: ${{ github.workspace }}/packages/vm
        run: pnpm run test:blockchain:buildIntegrity

  vm-blockchain-extended:
    if: contains(join(github.event.pull_request.labels.*.name, ' '), 'test all hardforks')
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # Args to pass to the tester.
        args:
          [
            '--fork=Chainstart --verify-test-amount-alltests',
            '--fork=Homestead --verify-test-amount-alltests',
            '--fork=TangerineWhistle --verify-test-amount-alltests',
            '--fork=SpuriousDragon --verify-test-amount-alltests',
            '--fork=Byzantium --verify-test-amount-alltests',
            '--fork=Constantinople --verify-test-amount-alltests',
            '--fork=Petersburg --verify-test-amount-alltests',
            '--fork=Istanbul --verify-test-amount-alltests',
            '--fork=MuirGlacier --verify-test-amount-alltests',
            '--fork=Berlin --verify-test-amount-alltests',
            '--fork=London --verify-test-amount-alltests',
            '--fork=Paris --verify-test-amount-alltests',
            '--fork=Shanghai --verify-test-amount-alltests',
            '--fork=Cancun --verify-test-amount-alltests',
            '--fork=ByzantiumToConstantinopleFixAt5 --verify-test-amount-alltests',
            '--fork=EIP158ToByzantiumAt5 --verify-test-amount-alltests',
            '--fork=FrontierToHomesteadAt5 --verify-test-amount-alltests',
            '--fork=HomesteadToDaoAt5 --verify-test-amount-alltests',
            '--fork=HomesteadToEIP150At5 --verify-test-amount-alltests',
            '--fork=BerlinToLondonAt5 --verify-test-amount-alltests',
          ]
      fail-fast: false
    steps:
      # We clone the repo and submodules if triggered from work-flow dispatch
      - if: inputs.submodule-cache-key == 'none'
        uses: actions/checkout@v5
        with:
          submodules: recursive

      # We restore the code/deps from cache if triggered from workflow_call (i.e. have valid cache key)
      - if: inputs.dep-cache-key != 'none'
        uses: actions/cache/restore@v4
        id: dep-cache
        with:
          path: ${{github.workspace}}
          key: ${{ inputs.dep-cache-key }}

      - uses: pnpm/action-setup@v4
        with:
          version: 10.5.2
          run_install: false

      - name: Use Node.js 20
        uses: actions/setup-node@v5
        with:
          node-version: 20

      - name: Install Dependencies (if not restored from cache)
        if: steps.dep-cache.outputs.cache-hit != 'true'
        run: pnpm install --frozen-lockfile
        working-directory: ${{ github.workspace }}

      - if: inputs.submodule-cache-key != 'none'
        uses: actions/cache/restore@v4
        name: Initialize ethereum-tests
        id: submodules-cache
        with:
          path: ${{github.workspace}}/packages/ethereum-tests
          key: ${{ inputs.submodule-cache-key}}
          fail-on-cache-miss: true

      - run: pnpm run test:blockchain -- ${{ matrix.args }}

  vm-benchmarks:
    runs-on: ubuntu-24.04
    steps:
      - name: Restore prepared workspace (if provided)
        if: inputs.dep-cache-key != 'none'
        uses: actions/cache/restore@v4
        id: dep-cache
        with:
          path: ${{ github.workspace }}
          key: ${{ inputs.dep-cache-key }}

      - name: Checkout repository (fallback)
        if: steps.dep-cache.outputs.cache-hit != 'true'
        uses: actions/checkout@v5
        with:
          submodules: recursive

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Setup Node.js (enable pnpm store cache)
        uses: actions/setup-node@v5
        with:
          node-version: 20
          cache: pnpm
          cache-dependency-path: pnpm-lock.yaml

      - name: Prefetch deps
        run: pnpm fetch --frozen-lockfile

      - name: Install dependencies (fallback)
        if: steps.dep-cache.outputs.cache-hit != 'true'
        working-directory: ${{ github.workspace }}
        run: pnpm install --frozen-lockfile --ignore-scripts --prefer-offline

      - name: Build benchmarks
        run: pnpm run build:benchmarks
        working-directory: ${{ github.workspace }}/packages/vm

      - name: Run benchmarks
        run: pnpm run benchmarks -- mainnetBlocks:10 | tee output.txt
        working-directory: ${{ github.workspace }}/packages/vm

      # Run git stash in case github-action-benchmark has trouble switching to gh-pages branch due to differing package-locks
      - run: git stash

      - name: Compare benchmarks
        uses: rhysd/github-action-benchmark@v1
        with:
          tool: 'benchmarkjs'
          # Where the output from the benchmark tool is stored
          output-file-path: ${{ env.cwd }}/output.txt
          # Location of data in gh-pages branch
          benchmark-data-dir-path: dev/bench/vm
          # Enable alert commit comment (default alert threshold: 200%)
          comment-on-alert: true
          # GitHub API token to make a commit comment
          github-token: ${{ secrets.GITHUB_TOKEN }}
          # Push and deploy to GitHub pages branch automatically (if on master)
          auto-push: 'false'

      # Re-apply git stash to prepare for saving back to cache.
      # Avoids exit code 1 by checking if there are changes to be stashed first
      - run: STASH_LIST=`git stash list` && [ ! -z $STASH_LIST ] && git stash apply || echo "No files to stash-apply. Skipping…"
